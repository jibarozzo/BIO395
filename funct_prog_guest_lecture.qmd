---
title: "Functional Programming in R"
subtitle: An Overview of Data Structures and `purrr` Package Functions
author: Bolívar Aponte Rolón
date: "2024-11-08"
format:
  revealjs:
    #   - ../../meds-slides-styles.scss
    slide-number: true
    # code-link: true
    highlight-style: a11y
    chalkboard: true
    theme: 
      - "assets/styling/custom.scss"
      
 

editor_options: 
  chunk_output_type: console
execute:
    echo: true
    eval: true
---

```{r}
#| label: setup
#| echo: false

library(tidyverse)
library(gapminder)
```

## Overview

-   Review R's data structures and vectorized operations

-   Overview of coding best practices

-   Functional programming with `purrr`

-   Importance of writing clear, reusable code

# Coding best practices

## It's easy to write bad code {.smaller}

:::::: columns
::: column
-   Duplicate code

-   Data clumps

-   Intermediary objects and Duplicate identifiers
:::

:::: column
::: {.fragment .semi-fade-out}
-   Comments (too many or too obvious)

-   Inconsistent naming and ambiguous names

-   Absolute paths

-   Too much indentation

-   Lack of version control
:::
::::
::::::

::: callout-tip
Check out these resources:

[Best Practices for Scientific Computing](https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.1001745)

[Code tips for developers](https://www.freecodecamp.org/news/how-to-write-clean-code-tips-for-developers/) more Java focused but still useful

[External list of resources](https://bookdown.org/alapo/learnr/intro.html#list-of-resources)
:::

# {{< fa brands r-project title="R logo" >}} Vector Basics

<!-- <div class="page-center vertical-center"> -->

<!-- <p class="custom-subtitle bottombr">{{< fa brands r-project title="R logo" >}} Vector Basics?</p> -->

<!-- </div> -->

## Atomic Vectors

Simple data structures in R that hold elements of the same type.

Types: `logical`, `integer`, `double`, and `character`

```{r}
numeric_vector <- c(1, 2, 3)
character_vector <- c("a", "b", "c")

numeric_vector

character_vector
```

Other, more complex vectors: *matrices*, *lists*, and *tibbles*.

## Vector Coercion

R automatically converts data types in vectors.

Hierarchy: Logical → Integer → Double → Character.

```{r}
mixed_vector <- c(TRUE, 2, "text")
print(mixed_vector) # Coerces to character
```

## Vector Coercion (cont.)

Explicit coercion: as.double(), as.integer(), as.character(), as.logical(), etc.

```{r}
as.character(c(1, 1.2, 1.23, 1.234))
```

Note the quotation marks in the output confirm our coercion worked as expected.

## Checking for vector types

Usefule functions:

-   `typeof()` determines the type of a vector
-   The `is.*()` functions (e.g. `is.character()`) test if a vector is of a specific type
-   The `as.*()` functions (e.g. `as.character()`) deliberately coerce a vector to a specific type

## Vector Indexing and Subsetting {.smaller}

Ways of accessing:

-   Single or multiple elements using **\[ \]**.
-   Access using names (named vectors).

```{r}
# Named vector
vec <- c(alpha = 1, beta = 2, gamma = 3)
vec["beta"]  # Accessing by name
vec[c(1, 2)] # Accessing multiple elements

# Unnamed vector
unvec <- c("alpha", "beta", "gamma")
unvec[2]

```

::: callout-note
{{< fa brands r-project title="R logo" >}} is a one-indexed language, while {{< fa brands python >}} is a zero-indexed language.
:::

## Logical Indexing

Subset vectors based on conditions.

```{r}

num_vec <- c(10, 15, 20, 25)
num_vec[num_vec > 15]
```

## Modifying in place

```{r}
vec <- c(1, 4, 9, 16, 25)
vec

vec[1] <- 0
vec
```

::: callout-warning
This is a permanent change. You are in fact overwriting the value.
:::

# *Lists* in {{< fa brands r-project title="R logo" >}}

## Introduction to Lists

Lists are recursive vectors that can hold elements of *different* types.

Lists *within* lists and different data types.

```{r}
my_list <- list(num = 1, char = "text", vec = c(1, 2, 3))
my_list
```

## Accessing List Elements

-   Single vs. Double Brackets: **\[ \]** vs. **\[\[ \]\]**.
-   Using **\$** for named elements.

```{r}
my_list[["num"]]
my_list$vec
```

# Functional Programming

## Avoiding Code Duplication {.smaller}

We can refactor repetitive code by creating functions

```{r}
#| label: copy_plots
#| echo: true
#| eval: false
#| warning: false
#| message: false

# Afghanistan
gapminder |>
  filter(country == "Afghanistan") |>
  ggplot(aes(x = year, y = lifeExp)) +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
  geom_smooth(
    method = lm,
    se = T,
    level = 0.95,
    na.rm = F
  ) +
  labs(title = "Afghanistan")

# United States
gapminder |>
  filter(country == "United States") |>
  ggplot(aes(x = year, y = lifeExp)) +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
  geom_smooth(
    method = lm,
    se = T,
    level = 0.95,
    na.rm = F
  ) +
  labs(title = "United States")

# United Kingdom
gapminder |>
  filter(country == "United Kingdom") |>
  ggplot(aes(x = year, y = lifeExp)) +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
  geom_smooth(
    method = lm,
    se = T,
    level = 0.95,
    na.rm = F
  ) +
  labs(title = "United Kingdom")

# India
gapminder |>
  filter(country == "India") |>
  ggplot(aes(x = year, y = lifeExp)) +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
  geom_smooth(
    method = lm,
    se = T,
    level = 0.95,
    na.rm = F
  ) +
  labs(title = "India")
```

## Anatomy of a function

![](assets/function_anatomy.png)

## Our *reusable* function:

```{r}
#| label: ggplot_function
#| echo: true
#| warning: false
#| message: false

lm_ggplot <- function(data, .country, x, y) {
data |>
    filter(country == {{ .country }} ) |>
    ggplot(aes(x = {{ x }}, y = {{ y }})) +
    geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
    geom_smooth(method = lm, se = T, level = 0.95, na.rm = F) +
    labs(title = .country)
}
```

## Testing our function {.smaller}

```{r}
#| label: test_function
#| layout: [[47,-5, 47], [47,-5, 47]]
#| message: false

lm_ggplot(gapminder, .country = "Afghanistan", x = year, y = lifeExp)
lm_ggplot(gapminder, .country = "United States", x = year, y = lifeExp)
lm_ggplot(gapminder, .country = "United Kingdom", x = year, y = lifeExp)
lm_ggplot(gapminder, .country = "India", x = year, y = lifeExp)
```

## Reduced code

::::: columns
::: column
**Bad**

``` r
# Afghanistan
gapminder |>
  filter(country == "Afghanistan") |>
  ggplot(aes(x = year, y = lifeExp)) +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
  geom_smooth(
    method = lm,
    se = T,
    level = 0.95,
    na.rm = F
  ) +
  labs(title = "Afghanistan")

# United States
gapminder |>
  filter(country == "United States") |>
  ggplot(aes(x = year, y = lifeExp)) +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
  geom_smooth(
    method = lm,
    se = T,
    level = 0.95,
    na.rm = F
  ) +
  labs(title = "United States")

# United Kingdom
gapminder |>
  filter(country == "United Kingdom") |>
  ggplot(aes(x = year, y = lifeExp)) +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
  geom_smooth(
    method = lm,
    se = T,
    level = 0.95,
    na.rm = F
  ) +
  labs(title = "United Kingdom")

# India
gapminder |>
  filter(country == "India") |>
  ggplot(aes(x = year, y = lifeExp)) +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
  geom_smooth(
    method = lm,
    se = T,
    level = 0.95,
    na.rm = F
  ) +
  labs(title = "India")
```
:::

::: column
**Better**

``` r
lm_ggplot(gapminder, .country = "Afghanistan", x = year, y = lifeExp)
lm_ggplot(gapminder, .country = "United States", x = year, y = lifeExp)
lm_ggplot(gapminder, .country = "United Kingdom", x = year, y = lifeExp)
lm_ggplot(gapminder, .country = "India", x = year, y = lifeExp)
```
:::
:::::

## Using Parameters and Defaults

Setting default values for arguments.

```{r}
#| echo: true
#| eval: false
lm_ggplot <- function(data, .country, x = year, y = lifeExp) {
data |>
    filter(country == {{ .country }} ) |>
    ggplot(aes(x = {{ x }}, y = {{ y }})) +
    geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
    geom_smooth(method = lm, se = T, level = 0.95, na.rm = F) +
    labs(title = .country)
}
```

# Let's practice

::: {.page-center .vertical-center}
<p class="custom-subtitle bottom">

Writing functions in the *tidyverse*

</p>
:::

## Write a function that:

-   creates a boxplot comparing the mean life expectancy by *continent*
-   name it **`country_boxplot`**

*Hint:* What's missing?

``` {.r code-line-numbers="1,4-7"}
country_boxplot <- function(data, x = ???, y = ???) {

data |>
    <...>
    ggplot(aes(x = {{ x }}, y = {{ y }}), ??? = {{ x }})) +
    <...>
    labs(title = ???)
}
```


## 

It should look something like this:

```{r}
continent_boxplot <- function(data, x = continent, y = lifeExp) {
data |>
    group_by({{ x }}) |>
    ggplot(aes(x = {{ x }}, y = {{ y }}, fill = {{ x }})) +
    geom_boxplot() +
    labs(title = "Life expectancy per continent")
}
```

::: {.fragment}
**Does it work?**
:::

## {auto-animate=true}
```{r }
continent_boxplot(gapminder, x = continent, y = lifeExp)
```


# Iterating with `purrr`
## `purrr` Package

Provides a complete and consistent set of tools for working with functions and vectors.

*Reduce duplicate code* by:

-   iterating over data structures
-   creating list objects with various data structures

![](assets/apple-touch-icon-152x152.png){.absolute bottom="0" right="0" width="275" height="275"}

## `map()` Function

Applies a function to each element of a list or vector. `map(v, .fun)`

```{r}
map(1:3, ~ .x ^ 2)
```

![](assets/Pasted%20image%2020240917112114.png){.absolute bottom="120" right="50"}

## 

`map()` can iterate over any type of vector, but always returns a list.

``` r
map(
  v, 
  .fun, 
  extra_arg_1 = "something", 
  extra_arg_2 = "something else"
)
```

## Anonymous functions with `map()`

Anonymous functions are functions without names, *typically* created in-line and used *only* once

These are equivalent:

``` r
map(c(1, 2, 3), function(.x) {.x ^ 2})
```

``` r
map(c(1, 2, 3), \(.x) .x ^ 2)
```

## `map()` Variants

Each atomic vector has it's own `map()` variant:

| Function    | Return type |
|-------------|-------------|
| `map_chr()` | character   |
| `map_dbl()` | double      |
| `map_int()` | integer     |
| `map_lgl()` | logical     |

## `map_dbl()`

 Output is a an atomic vector of integers *NOT* a list.

```{r}
map_dbl(c(1.1, 2.5, 3.9), round)
```


```{r}
map(c(1.1, 2.5, 3.9), round)
```

## Mapping Over Data Frames

Using `map()` to iterate over data frame columns.

```{r}
data <- data.frame(a = 1:5, b = 6:10)
map(data, mean)
```

## `map()` and Additional Arguments

Pass extra arguments to mapped function.

```{r}
map(c(10, 20, 30), runif, min = 0, max = 5)
```

## `walk()` for "Side Effects"

`walk()` performs an action instead of producing data (e.g.,` print()`). 

```{r}
walk(1:3, ~ print(.x))
```

## `map()` for Data Transformation

Using map() for transformations within columns.

```{r}
df <- data.frame(x = c(1, 2), y = c(3, 4))
map(df, sqrt)
```

## List Columns and Nested Data Frames

Store data frames or lists within columns for complex data structures.

```{r}
# Dummy data frames
data_a <- data.frame(value = c(1, 4, 5, 6),  sample = c("a", "b", "c", "d"))
data_b <- data.frame(value = c(10, 13, 14, 21),  sample = c("f", "t", "y", "r"))

# Data frame with data frames
df <- tibble(group = c("data_a", "data_b"), data = list(data_a, data_b))
df
```

## Accessing Nested DFs

Just like atomic vectors, by indexing

```{r}
# data_a
df[[2]][[1]]

# data_b
df[[2]][[2]]
```

# Practice using `map()`

## Exercise 1

- Use `map()` and `lm_ggplot` to produce a *list* of scatter plots for the countries below

- Save it to an object called `plots`


```{r}
countries <- c("Afghanistan",
               "United States",
               "United Kingdom",
               "China",
               "India")
```

::: {.fragment}
```{r}
plots <- map(countries,
             \(.x) lm_ggplot(
               data = gapminder,
               .country = .x,
               x = year,
               y = lifeExp
             ))
```
:::

## Reducing our code more


:::: {.columns}
::: {.column}
**Bad**

``` r
# Afghanistan
gapminder |>
  filter(country == "Afghanistan") |>
  ggplot(aes(x = year, y = lifeExp)) +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
  geom_smooth(
    method = lm,
    se = T,
    level = 0.95,
    na.rm = F
  ) +
  labs(title = "Afghanistan")

# United States
gapminder |>
  filter(country == "United States") |>
  ggplot(aes(x = year, y = lifeExp)) +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
  geom_smooth(
    method = lm,
    se = T,
    level = 0.95,
    na.rm = F
  ) +
  labs(title = "United States")

# United Kingdom
gapminder |>
  filter(country == "United Kingdom") |>
  ggplot(aes(x = year, y = lifeExp)) +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
  geom_smooth(
    method = lm,
    se = T,
    level = 0.95,
    na.rm = F
  ) +
  labs(title = "United Kingdom")

# India
gapminder |>
  filter(country == "India") |>
  ggplot(aes(x = year, y = lifeExp)) +
  geom_jitter(position = position_jitter(width = 0.1, height = 0), alpha = 1) +
  geom_smooth(
    method = lm,
    se = T,
    level = 0.95,
    na.rm = F
  ) +
  labs(title = "India")
```
:::

::: {.column}
**Better**

``` r
lm_ggplot(gapminder, .country = "Afghanistan", x = year, y = lifeExp)
lm_ggplot(gapminder, .country = "United States", x = year, y = lifeExp)
lm_ggplot(gapminder, .country = "United Kingdom", x = year, y = lifeExp)
lm_ggplot(gapminder, .country = "India", x = year, y = lifeExp)
```
:::
::::


## Reducing our code more (*cont.*)

**Best**
```r
map(countries,
             \(.x) lm_ggplot(
               data = gapminder,
               .country = .x,
               x = year,
               y = lifeExp
             ))
```



## Exercise 2 {.smaller}

Use `walk2()` to save your *ggplots*:

Setting up where to save them
```r
# make the folder to put them it (if exists, {fs} does nothing)
fs::dir_create("plots")

# make the file names
plot_paths <- str_glue("plots/{print(countries)}.png")
```
::: {.callout-tip}
Usage of `::` helps to access the exact function from that specific package. This avoids conflicts with other packages.
:::

::: {.callout-note}
Check out the [*fs*](https://fs.r-lib.org/index.html) and [*glue*](https://glue.tidyverse.org/) packages for more information on the functions we used above.
:::

## Exercise 2 (*cont.*)

```r
walk2(
  plot_paths,
  plots,
  \(path, plot) ggsave(path, plot, width = 6, height = 6)
)
```

Let's check if they are saved:

```{r}
fs::dir_tree("plots")
```

## Conclusion and Best Practices

Functions allow us to automate tasks while avoiding code repetition

- Three main components: the function **name**, **body**, and **arguments**.

R uses vectors which can be subset several ways:

- `[`, always returns a smaller list (e.g., a column)
- `[[`, extracts a single element (e.g., cell value)
- `$`, a shorthand for `[[` when the elements of a list are named

Iterating with `map()` can:

- greatly reduce code repetition
- increase maintainability








- The list-column workflow section of the [purrr cheatsheet](https://github.com/rstudio/cheatsheets/blob/master/purrr.pdf)

## Resources and Further Reading

- [R for Data Science](https://r4ds.had.co.nz/)
- [Gapminder vignette](https://cran.r-project.org/web/packages/gapminder/vignettes/gapminder.html)
- [Code Smells and Feels](https://github.com/jennybc/code-smells-and-feels)
- [Efficiency and Consistency: Automate Subset Graphics with ggplot2 and purrr](https://www.cedricscherer.com/2023/07/05/efficiency-and-consistency-automate-subset-graphics-with-ggplot2-and-purrr/)
- [`purrr::walk()` this way](https://www.tidyverse.org/blog/2023/05/purrr-walk-this-way/)


